
schema {
  query: RootQuery,
  mutation: RootMutation,
}

# ===========================================================================================

"""
  # Root Query
  Queries defined on the API.
"""
type RootQuery {
  "Gives a list of all registered users"
  users: [User!]
  "Gives a list of all created tasks"
  roles: [Role!]
  "Gives a list of all created projects"
  projects: [Project!]
  "Gives a list of all created tasks"
  tasks: [Task!]

  "Gives data for specific user with provided ID"
  userByID(id: String!): User
  "Gives data for specific user with provided email"
  userByEmail(email: String!): User

  "Gives data for specific role with provided ID"
  role(id: String!): Role

  "Gives data for specific project with provided ID"
  project(id: String!): Project

  "Gives data for specific task with provided ID"
  task(id: String!): Task

  "Logs you into the application (Auth query)"
  login(email: String!, password: String!): AuthData!
}

# ===========================================================================================

"""
  # Root Mutation
  Mutations defined on the API.
"""
type RootMutation {
  "Creates a new User (Similar to what Signing-Up does just it won't log you into the app)"
  createUser(inp: UserInput!): User
  "Creates a new Role"
  createRole(token: String!, inp: RoleInput!): Role
  "Creates a new Task"
  createTask(token: String!, inp: TaskInput!): Task
  "Creates a new Project"
  createProject(token: String!, inp: ProjectInput!): Project

  "Updates User data"
  updateUser(token: String!, updt: UserUpdate!): User
  "Updates Roles"
  updateRole(token: String!, updt: RoleUpdate!): Role
  "Updates Tasks"
  updateTask(token: String!, updt: TaskUpdate!): Task
  "Updates Projects"
  updateProject(token: String!, updt: ProjectUpdate!): Project
}

# ===========================================================================================

"""
  # Auth Data
  Data returned after authentication.
"""
type AuthData {
  "Document ID for the logged in user"
  userID: String!
  "JSON-Web-Token (JWT) generated by the server and to be used for login"
  token: String!
  "Time until expiration of token since its creation (in hours)"
  tokenExpiration: Int!
}

# ===========================================================================================

"""
  # User Type
  Type definition for User data.
"""
type User {
  "Document ID of the user"
  id: String
  "User's name"
  name: String
  "User's email"
  email: String
  "Roles assigned to the user"
  roles: [Role!]
}

input UserInput {
  name: String
  email: String
  password: String
}

input UserUpdate {
  name: String
  email: String
  roles: [String]
}

# ===========================================================================================

"""
  # Role Type
  Type definition for Role data
"""
type Role {
  "Document ID for role"
  id: String
  "Role Title"
  title: String
  "Rights this role provides the user with"
  rights: [Right!]
}

input RoleInput {
  title: String
}

input RoleUpdate {
  id: String
  title: String
  rights: [Right!]
}

# ===========================================================================================

"""
  # Project Type
  Type definition for Project data.
"""
type Project {
  "Document ID for Project"
  id: String
  "Project Title"
  title: String
  "Project Description"
  description: String
  "Tasks which are a part of this Project"
  tasks: [Task!]
  "Users assigned to this Project"
  assignees: [User!]
}

input ProjectInput {
  title: String
  description: String
}

input ProjectUpdate {
  id: String
  title: String
  description: String
  assignees: [String!]
}

# ===========================================================================================

"""
  # Task Type
  Type definition for Task data.
"""
type Task {
  "Document ID for Task"
  id: String
  "Task Title"
  title: String
  "Task Description"
  description: String
  "Project this task belongs to (`null` if its a miscellaneous task)"
  project: Project
  "Users assigned to this task"
  assignees: [User!]
}

input TaskInput {
  title: String
  description: String
  project: String
}

input TaskUpdate {
  id: String
  title: String
  description: String
  project: String
  assignees: [String!]
}

# ===========================================================================================

"""
  # Right
  Rights a User can have through defined roles.
"""
enum Right {
  "Allows creating new users"
  USERS_CREATE,
  "Allows updating user data"
  USERS_UPDATE,

  "Allows creating new roles"
  ROLES_CREATE,
  "Allows updating roles"
  ROLES_UPDATE,

  "Allows creating new projects"
  PROJECTS_CREATE,
  "Allows updating project data"
  PROJECTS_UPDATE,

  "Allows creating new tasks"
  TASKS_CREATE,
  "Allows updating tasks"
  TASKS_UPDATE,
}
