
schema {
  query: RootQuery,
  mutation: RootMutation,
}

type RootQuery {
  users: [User!]
  roles: [Role!]
  projects: [Project!]
  tasks: [Task!]

  user_by_id(id: String!): User
  user_by_email(email: String!): User

  role(id: String!): Role

  project(id: String!): Project

  task(id: String!): Task

  login(email: String!, password: String!): AuthData!
}

type RootMutation {
  createUser(inp: UserInput!): User
  createRole(token: String!, inp: RoleInput!): Role
  createProject(token: String!, inp: ProjectInput!): Project
  createTask(token: String!, inp: TaskInput!): Task
}

type AuthData {
  userID: String!
  token: String!
  tokenExpiration: Int!
}

type User {
  id: String
  name: String
  email: String
  roles: [Role!]
}

type UserInput {
  name: String
  email: String
}

type Role {
  id: String
  title: String
  rights: [Right!]
}

type RoleInput {
  title: String
}

type Project {
  id: String
  title: String
  description: String
  tasks: [Task!]
  assignees: [User!]
}

type ProjectInput {
  title: String
  description: String
}

type Task {
  id: String
  title: String
  description: String
  project: Project
  assignees: [User!]
}

type TaskInput {
  title: String
  description: String
  project: Project
}

enum Right {
  USERS_CREATE,
  USERS_UPDATE,

  ROLES_CREATE,
  ROLES_UPDATE,

  PROJECTS_CREATE,
  PROJECTS_UPDATE,

  TASKS_CREATE,
  TASKS_UPDATE,
}
